<style lang="scss">
    $fontcolor: #7b7b7b;
    $activecolor: #13b113;
    .chartboard {
        background-color: #ededed;
        padding-bottom: 120rpx;
        &.fixed {
            position:fixed;
            left:0;
            right:0;
            overflow-y:scroll;
        }
        .msgarea {
            padding: 20rpx 10rpx;
            .clearfix:after{content:".";display:block;height:0;clear:both;visibility:hidden}
            .clearfix{height:1%;}
            .msg {
                border: 1px solid #d8d8d8;
                font-size: 32rpx;
                display: inline-block;
                padding: 14rpx 20rpx;
                max-width: 450rpx;
                border-radius: 15rpx;
            }
            .icon {
                width: 70rpx;
                height: 70rpx;
            }
            &.fromme {
                .msg {
                    background-color: #9fe757;
                    float: right;
                    margin-right: 10rpx;
                }
                .icon {
                    float: right;
                    margin-right: 10rpx;
                }
            }
            &.other {
                .msg {
                    background-color: #fff;
                    float: left;
                    margin-left: 10rpx;
                }
                .icon {
                    float: left;
                    margin-left: 10rpx;
                }
            }
        }
    }
</style>
<template>
    <scroll-view scroll-y="1" class="chartboard{{focus ? ' fixed' : ''}}">
        <div v-for="(item, index) in message">
            <div class="msgarea{{item.from === 'me' ? ' fromme' : ' other'}}">
                <image class="icon" src="{{item.icon}}"></image>
                <div class="msg">{{item.msg}}</div>
                <div class="clearfix"></div>
            </div>
        </div>
    </scroll-view>
</template>
<script>
    import wepy from '@wepy/core';

    import api from '../common/api';
    import global from '../common/global';

    wepy.component({

        props: ['itemid'],

        data: {
            message: [],
            focus: false,
        },

        watch: {
            itemid: function (newval, oldval) {
                console.log('Load message from id "' + newval + '"');
                this.loadMessage(newval);
            }
        },

        attached () {
        },

        created () {
        },

        methods: {
            loadMessage (id) {
                let userinfo, message;
                api.getUserInfo().then(userinfo => {
                    this.current = userinfo;
                    api.getHistory(id).then(message => {
                        this.message = message;
                        this.to = id;
                        this.message.forEach(msg => {
                            if (msg.from === 'me') {
                                msg.name = userinfo.nickName;
                                msg.icon = userinfo.avatarUrl;
                            }
                        });
                    });
                });
            },
            sendMessage (msg) {
                let id = this.to;
                api.sendMsg(id, msg).then(msgObj => {
                    msgObj.name = this.current.nickName;
                    msgObj.icon = this.current.avatarUrl;
                    this.message.push(msgObj);

                    api.getRandomReply(id).then(reply => {
                        this.replyMessage(reply);
                    });
                });
            },

            replyMessage (msg) {
                let id = this.to;
                let contact = global.getContact(id);
                api.replyMsg(id, msg).then(msgObj => {
                    msgObj.name = contact.name;
                    msgObj.icon = contact.icon;
                    this.message.push(msgObj);
                })
            }
        },



        fixPosition (focus) {
            this.focus = focus;
            this.$apply();
        },

    });
</script>
